# Enhanced BNF Grammar for YugabyteDB SQL Fuzzing
# This grammar generates complex, realistic SQL queries for comprehensive testing

# Statement Types
statement:
  type: choice
  options: [select_stmt, insert_stmt, update_stmt, delete_stmt, create_table_stmt, drop_table_stmt]

# SELECT Statement - Enhanced for complexity
select_stmt:
  type: sequence
  elements: [select_clause, from_clause, where_clause_opt, group_by_clause_opt, having_clause_opt, order_by_clause_opt, limit_clause_opt]

select_clause:
  type: sequence
  elements: [SELECT, select_list]

select_list:
  type: choice
  options: [star_select, column_select, function_select, expression_select]

star_select:
  type: sequence
  elements: [STAR]

column_select:
  type: sequence
  elements: [column_name, column_alias_opt]

function_select:
  type: sequence
  elements: [aggregate_function, column_alias_opt]

expression_select:
  type: sequence
  elements: [arithmetic_expression, column_alias_opt]

# Enhanced FROM clause with JOINs
from_clause:
  type: sequence
  elements: [FROM, table_reference, join_clause_opt]

table_reference:
  type: choice
  options: [table_name, subquery, table_alias]

join_clause_opt:
  type: optional
  element: join_clause

join_clause:
  type: sequence
  elements: [join_type, table_reference, ON, join_condition]

join_type:
  type: choice
  options: [INNER_JOIN, LEFT_JOIN, RIGHT_JOIN, FULL_JOIN]

join_condition:
  type: choice
  options: [comparison_predicate, boolean_expression]

# Enhanced WHERE clause
where_clause_opt:
  type: optional
  element: where_clause

where_clause:
  type: sequence
  elements: [WHERE, boolean_expression]

boolean_expression:
  type: choice
  options: [boolean_term, boolean_expression_compound]

boolean_term:
  type: choice
  options: [comparison_predicate, in_predicate, like_predicate, null_predicate, exists_predicate]

boolean_expression_compound:
  type: sequence
  elements: [boolean_expression, logical_operator, boolean_expression]

logical_operator:
  type: choice
  options: [AND, OR]

# Enhanced comparison predicates
comparison_predicate:
  type: sequence
  elements: [column_name, comparison_operator, comparison_value]

comparison_operator:
  type: choice
  options: [EQ, NE, LT, LE, GT, GE]

comparison_value:
  type: choice
  options: [literal, column_name, subquery, function_call]

# Enhanced predicates for YugabyteDB
in_predicate:
  type: sequence
  elements: [column_name, IN, LPAREN, value_list, RPAREN]

like_predicate:
  type: sequence
  elements: [column_name, LIKE, string_literal]

null_predicate:
  type: sequence
  elements: [column_name, IS, NULL_OR_NOT]

exists_predicate:
  type: sequence
  elements: [EXISTS, LPAREN, select_stmt, RPAREN]

# Enhanced GROUP BY with HAVING
group_by_clause_opt:
  type: optional
  element: group_by_clause

group_by_clause:
  type: sequence
  elements: [GROUP_BY, group_by_list]

group_by_list:
  type: sequence
  elements: [column_name, group_by_list_tail]

group_by_list_tail:
  type: optional
  element: group_by_list_continuation

group_by_list_continuation:
  type: sequence
  elements: [COMMA, column_name, group_by_list_tail]

having_clause_opt:
  type: optional
  element: having_clause

having_clause:
  type: sequence
  elements: [HAVING, boolean_expression]

# Enhanced ORDER BY
order_by_clause_opt:
  type: optional
  element: order_by_clause

order_by_clause:
  type: sequence
  elements: [ORDER_BY, order_by_list]

order_by_list:
  type: sequence
  elements: [order_by_item, order_by_list_tail]

order_by_item:
  type: sequence
  elements: [column_name, sort_direction_opt]

sort_direction_opt:
  type: optional
  element: sort_direction

sort_direction:
  type: choice
  options: [ASC, DESC]

# Enhanced LIMIT
limit_clause_opt:
  type: optional
  element: limit_clause

limit_clause:
  type: sequence
  elements: [LIMIT, limit_value, offset_opt]

limit_value:
  type: choice
  options: [integer_literal, parameter]

offset_opt:
  type: optional
  element: offset_clause

offset_clause:
  type: sequence
  elements: [OFFSET, integer_literal]

# Enhanced INSERT Statement
insert_stmt:
  type: sequence
  elements: [INSERT, INTO, table_name, column_list_opt, VALUES, value_list, returning_clause_opt]

column_list_opt:
  type: optional
  element: column_list

column_list:
  type: sequence
  elements: [LPAREN, column_name, column_list_tail, RPAREN]

column_list_tail:
  type: optional
  element: column_list_continuation

column_list_continuation:
  type: sequence
  elements: [COMMA, column_name, column_list_tail]

value_list:
  type: sequence
  elements: [LPAREN, literal, value_list_tail, RPAREN]

value_list_tail:
  type: optional
  element: value_list_continuation

value_list_continuation:
  type: sequence
  elements: [COMMA, literal, value_list_tail]

returning_clause_opt:
  type: optional
  element: returning_clause

returning_clause:
  type: sequence
  elements: [RETURNING, select_list]

# Enhanced UPDATE Statement
update_stmt:
  type: sequence
  elements: [UPDATE, table_name, SET, update_assignment_list, where_clause_opt, returning_clause_opt]

update_assignment_list:
  type: sequence
  elements: [update_assignment, update_assignment_tail]

update_assignment:
  type: sequence
  elements: [column_name, EQ, update_expression]

update_assignment_tail:
  type: optional
  element: update_assignment_continuation

update_assignment_continuation:
  type: sequence
  elements: [COMMA, update_assignment, update_assignment_tail]

update_expression:
  type: choice
  options: [literal, arithmetic_expression, function_call, case_expression]

# Enhanced DELETE Statement
delete_stmt:
  type: sequence
  elements: [DELETE, FROM, table_name, where_clause_opt, returning_clause_opt]

# Enhanced CREATE TABLE Statement
create_table_stmt:
  type: sequence
  elements: [CREATE, TABLE, table_name, LPAREN, column_definition_list, table_constraints_opt, RPAREN]

column_definition_list:
  type: sequence
  elements: [column_definition, column_definition_tail]

column_definition:
  type: sequence
  elements: [column_name, data_type, column_constraints_opt]

column_constraints_opt:
  type: optional
  element: column_constraints

column_constraints:
  type: sequence
  elements: [column_constraint, column_constraints_tail]

column_constraint:
  type: choice
  options: [NOT_NULL, DEFAULT, PRIMARY_KEY, UNIQUE, CHECK]

# Enhanced DROP TABLE Statement
drop_table_stmt:
  type: sequence
  elements: [DROP, TABLE, table_name, CASCADE_opt]

CASCADE_opt:
  type: optional
  element: CASCADE

# Enhanced functions and expressions
function_call:
  type: sequence
  elements: [function_name, LPAREN, function_arguments_opt, RPAREN]

function_name:
  type: choice
  options: [aggregate_function_name, scalar_function_name, window_function_name]

aggregate_function_name:
  type: choice
  options: [COUNT, SUM, AVG, MIN, MAX, STRING_AGG, ARRAY_AGG]

scalar_function_name:
  type: choice
  options: [COALESCE, NULLIF, GREATEST, LEAST, EXTRACT, DATE_TRUNC, TO_CHAR, TO_DATE]

window_function_name:
  type: choice
  options: [ROW_NUMBER, RANK, DENSE_RANK, LAG, LEAD, FIRST_VALUE, LAST_VALUE]

function_arguments_opt:
  type: optional
  element: function_arguments

function_arguments:
  type: sequence
  elements: [function_argument, function_arguments_tail]

function_argument:
  type: choice
  options: [column_name, literal, arithmetic_expression, function_call]

# Enhanced arithmetic expressions
arithmetic_expression:
  type: choice
  options: [arithmetic_term, arithmetic_expression_compound]

arithmetic_term:
  type: choice
  options: [column_name, literal, function_call, LPAREN, arithmetic_expression, RPAREN]

arithmetic_expression_compound:
  type: sequence
  elements: [arithmetic_expression, arithmetic_operator, arithmetic_expression]

arithmetic_operator:
  type: choice
  options: [PLUS, MINUS, MULTIPLY, DIVIDE, MODULO]

# Enhanced CASE expressions
case_expression:
  type: sequence
  elements: [CASE, case_when_list, case_else_opt, END]

case_when_list:
  type: sequence
  elements: [case_when, case_when_list_tail]

case_when:
  type: sequence
  elements: [WHEN, boolean_expression, THEN, literal]

case_else_opt:
  type: optional
  element: case_else

case_else:
  type: sequence
  elements: [ELSE, literal]

# Enhanced subqueries
subquery:
  type: sequence
  elements: [LPAREN, select_stmt, RPAREN, subquery_alias_opt]

subquery_alias_opt:
  type: optional
  element: subquery_alias

subquery_alias:
  type: sequence
  elements: [AS, table_alias]

# Enhanced literals for YugabyteDB
literal:
  type: choice
  options: [string_literal, numeric_literal, boolean_literal, null_literal, timestamp_literal, interval_literal]

string_literal:
  type: choice
  options: [quoted_string, unquoted_string]

quoted_string:
  type: sequence
  elements: [SINGLE_QUOTE, string_content, SINGLE_QUOTE]

string_content:
  type: choice
  options: [string_char, string_escape, string_content]

string_char:
  type: regex
  pattern: "[^'\\]"

string_escape:
  type: sequence
  elements: [BACKSLASH, escape_char]

escape_char:
  type: choice
  options: [SINGLE_QUOTE, BACKSLASH, N, T, R]

numeric_literal:
  type: choice
  options: [integer_literal, decimal_literal, scientific_literal]

integer_literal:
  type: regex
  pattern: "[0-9]+"

decimal_literal:
  type: regex
  pattern: "[0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+"

scientific_literal:
  type: regex
  pattern: "[0-9]+\\.[0-9]*[eE][+-]?[0-9]+|[0-9]*\\.[0-9]+[eE][+-]?[0-9]+"

boolean_literal:
  type: choice
  options: [TRUE, FALSE]

null_literal:
  type: choice
  options: [NULL, UNKNOWN]

timestamp_literal:
  type: choice
  options: [CURRENT_TIMESTAMP, CURRENT_DATE, NOW, timestamp_string]

timestamp_string:
  type: sequence
  elements: [TIMESTAMP, string_literal]

interval_literal:
  type: sequence
  elements: [INTERVAL, string_literal, interval_qualifier]

interval_qualifier:
  type: choice
  options: [YEAR, MONTH, DAY, HOUR, MINUTE, SECOND]

# Enhanced data types for YugabyteDB
data_type:
  type: choice
  options: [character_type, numeric_type, datetime_type, boolean_type, json_type, array_type, uuid_type]

character_type:
  type: choice
  options: [CHAR, VARCHAR, TEXT, CHAR_VARYING]

numeric_type:
  type: choice
  options: [SMALLINT, INTEGER, BIGINT, DECIMAL, NUMERIC, REAL, DOUBLE_PRECISION, SERIAL, BIGSERIAL]

datetime_type:
  type: choice
  options: [DATE, TIME, TIMESTAMP, TIMESTAMPTZ, INTERVAL]

boolean_type:
  type: choice
  options: [BOOLEAN, BOOL]

json_type:
  type: choice
  options: [JSON, JSONB]

array_type:
  type: sequence
  elements: [data_type, LBRACKET, RBRACKET]

uuid_type:
  type: choice
  options: [UUID]

# Enhanced identifiers
identifier:
  type: choice
  options: [quoted_identifier, unquoted_identifier]

quoted_identifier:
  type: sequence
  elements: [DOUBLE_QUOTE, identifier_content, DOUBLE_QUOTE]

identifier_content:
  type: regex
  pattern: "[^\"\\n\\r]+"

unquoted_identifier:
  type: regex
  pattern: "[a-zA-Z_][a-zA-Z0-9_]*"

# Enhanced table and column names
table_name:
  type: choice
  options: [identifier, qualified_table_name]

qualified_table_name:
  type: sequence
  elements: [schema_name, DOT, table_name]

schema_name:
  type: choice
  options: [identifier, PUBLIC, information_schema, pg_catalog]

column_name:
  type: choice
  options: [identifier, qualified_column_name]

qualified_column_name:
  type: sequence
  elements: [table_alias, DOT, column_name]

table_alias:
  type: choice
  options: [identifier, table_name]

column_alias:
  type: choice
  options: [identifier, AS, identifier]

# Enhanced parameters for prepared statements
parameter:
  type: sequence
  elements: [DOLLAR, parameter_number]

parameter_number:
  type: regex
  pattern: "[0-9]+"

# Enhanced value lists
value_list:
  type: sequence
  elements: [LPAREN, literal, value_list_tail, RPAREN]

value_list_tail:
  type: optional
  element: value_list_continuation

value_list_continuation:
  type: sequence
  elements: [COMMA, literal, value_list_tail]

# Enhanced aggregate functions
aggregate_function:
  type: sequence
  elements: [aggregate_function_name, LPAREN, aggregate_argument, RPAREN]

aggregate_argument:
  type: choice
  options: [column_name, literal, DISTINCT, column_name]

# Enhanced window functions
window_function:
  type: sequence
  elements: [window_function_name, LPAREN, function_arguments_opt, RPAREN, OVER, window_specification]

window_specification:
  type: sequence
  elements: [LPAREN, partition_clause_opt, order_clause_opt, frame_clause_opt, RPAREN]

partition_clause_opt:
  type: optional
  element: partition_clause

partition_clause:
  type: sequence
  elements: [PARTITION_BY, column_name, partition_list_tail]

order_clause_opt:
  type: optional
  element: order_clause

frame_clause_opt:
  type: optional
  element: frame_clause

frame_clause:
  type: choice
  options: [range_frame, rows_frame]

range_frame:
  type: sequence
  elements: [RANGE, frame_bound]

rows_frame:
  type: sequence
  elements: [ROWS, frame_bound]

frame_bound:
  type: choice
  options: [UNBOUNDED_PRECEDING, CURRENT_ROW, UNBOUNDED_FOLLOWING, integer_literal, PRECEDING, FOLLOWING]

# Enhanced CTEs (Common Table Expressions)
with_clause:
  type: sequence
  elements: [WITH, cte_list]

cte_list:
  type: sequence
  elements: [cte_definition, cte_list_tail]

cte_definition:
  type: sequence
  elements: [cte_name, AS, LPAREN, select_stmt, RPAREN]

cte_name:
  type: identifier

# Enhanced set operations
set_operation:
  type: sequence
  elements: [select_stmt, set_operator, select_stmt]

set_operator:
  type: choice
  options: [UNION, UNION_ALL, INTERSECT, EXCEPT]

# Enhanced locking clauses
locking_clause:
  type: sequence
  elements: [FOR, lock_strength, lock_target_opt]

lock_strength:
  type: choice
  options: [UPDATE, SHARE, KEY_SHARE, NO_KEY_UPDATE]

lock_target_opt:
  type: optional
  element: lock_target

lock_target:
  type: choice
  options: [OF, table_name, NOWAIT, SKIP_LOCKED]

# Enhanced hints for YugabyteDB
yugabyte_hint:
  type: sequence
  elements: [HINT, LPAREN, hint_option, RPAREN]

hint_option:
  type: choice
  options: [LEADER_LOCAL, LEADER_READ, LEADER_WRITE, PREFER_LOCAL, PREFER_REMOTE]

# Terminal symbols
SELECT: "SELECT"
FROM: "FROM"
WHERE: "WHERE"
GROUP_BY: "GROUP BY"
HAVING: "HAVING"
ORDER_BY: "ORDER BY"
LIMIT: "LIMIT"
OFFSET: "OFFSET"
INSERT: "INSERT"
INTO: "INTO"
VALUES: "VALUES"
UPDATE: "UPDATE"
SET: "SET"
DELETE: "DELETE"
CREATE: "CREATE"
TABLE: "TABLE"
DROP: "DROP"
CASCADE: "CASCADE"
AS: "AS"
ON: "ON"
INNER_JOIN: "INNER JOIN"
LEFT_JOIN: "LEFT JOIN"
RIGHT_JOIN: "RIGHT JOIN"
FULL_JOIN: "FULL JOIN"
IN: "IN"
LIKE: "LIKE"
IS: "IS"
NULL: "NULL"
NOT: "NOT"
EXISTS: "EXISTS"
AND: "AND"
OR: "OR"
TRUE: "TRUE"
FALSE: "FALSE"
UNKNOWN: "UNKNOWN"
CURRENT_TIMESTAMP: "CURRENT_TIMESTAMP"
CURRENT_DATE: "CURRENT_DATE"
NOW: "NOW"
INTERVAL: "INTERVAL"
TIMESTAMP: "TIMESTAMP"
YEAR: "YEAR"
MONTH: "MONTH"
DAY: "DAY"
HOUR: "HOUR"
MINUTE: "MINUTE"
SECOND: "SECOND"
CHAR: "CHAR"
VARCHAR: "VARCHAR"
TEXT: "TEXT"
CHAR_VARYING: "CHARACTER VARYING"
SMALLINT: "SMALLINT"
INTEGER: "INTEGER"
INT: "INT"
BIGINT: "BIGINT"
DECIMAL: "DECIMAL"
NUMERIC: "NUMERIC"
REAL: "REAL"
DOUBLE_PRECISION: "DOUBLE PRECISION"
SERIAL: "SERIAL"
BIGSERIAL: "BIGSERIAL"
DATE: "DATE"
TIME: "TIME"
TIMESTAMPTZ: "TIMESTAMP WITH TIME ZONE"
BOOLEAN: "BOOLEAN"
BOOL: "BOOL"
JSON: "JSON"
JSONB: "JSONB"
UUID: "UUID"
PUBLIC: "public"
information_schema: "information_schema"
pg_catalog: "pg_catalog"
DISTINCT: "DISTINCT"
COALESCE: "COALESCE"
NULLIF: "NULLIF"
GREATEST: "GREATEST"
LEAST: "LEAST"
EXTRACT: "EXTRACT"
DATE_TRUNC: "DATE_TRUNC"
TO_CHAR: "TO_CHAR"
TO_DATE: "TO_DATE"
ROW_NUMBER: "ROW_NUMBER"
RANK: "RANK"
DENSE_RANK: "DENSE_RANK"
LAG: "LAG"
LEAD: "LEAD"
FIRST_VALUE: "FIRST_VALUE"
LAST_VALUE: "LAST_VALUE"
STRING_AGG: "STRING_AGG"
ARRAY_AGG: "ARRAY_AGG"
COUNT: "COUNT"
SUM: "SUM"
AVG: "AVG"
MIN: "MIN"
MAX: "MAX"
CASE: "CASE"
WHEN: "WHEN"
THEN: "THEN"
ELSE: "ELSE"
END: "END"
UNION: "UNION"
UNION_ALL: "UNION ALL"
INTERSECT: "INTERSECT"
EXCEPT: "EXCEPT"
WITH: "WITH"
OVER: "OVER"
PARTITION_BY: "PARTITION BY"
RANGE: "RANGE"
ROWS: "ROWS"
UNBOUNDED_PRECEDING: "UNBOUNDED PRECEDING"
CURRENT_ROW: "CURRENT ROW"
UNBOUNDED_FOLLOWING: "UNBOUNDED FOLLOWING"
PRECEDING: "PRECEDING"
FOLLOWING: "FOLLOWING"
FOR: "FOR"
UPDATE: "UPDATE"
SHARE: "SHARE"
KEY_SHARE: "KEY SHARE"
NO_KEY_UPDATE: "NO KEY UPDATE"
OF: "OF"
NOWAIT: "NOWAIT"
SKIP_LOCKED: "SKIP LOCKED"
HINT: "/*+"
LEADER_LOCAL: "LEADER_LOCAL"
LEADER_READ: "LEADER_READ"
LEADER_WRITE: "LEADER_WRITE"
PREFER_LOCAL: "PREFER_LOCAL"
PREFER_REMOTE: "PREFER_REMOTE"
RETURNING: "RETURNING"
LPAREN: "("
RPAREN: ")"
LBRACKET: "["
RBRACKET: "]"
DOT: "."
COMMA: ","
SEMICOLON: ";"
SINGLE_QUOTE: "'"
DOUBLE_QUOTE: "\""
BACKSLASH: "\\"
DOLLAR: "$"
PLUS: "+"
MINUS: "-"
MULTIPLY: "*"
DIVIDE: "/"
MODULO: "%"
EQ: "="
NE: "<>"
LT: "<"
LE: "<="
GT: ">"
GE: ">="
STAR: "*"
NULL_OR_NOT: "NULL"