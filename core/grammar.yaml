# BNF Grammar for YugabyteDB SQL Fuzzing
# Simplified working grammar to avoid syntax errors

# Statement Types
statement:
  type: choice
  options: [select_stmt, insert_stmt, update_stmt, delete_stmt, create_table_stmt, drop_table_stmt]

# SELECT Statement
select_stmt:
  type: sequence
  elements: [SELECT, select_list, FROM, table_reference, where_clause_opt, group_by_clause_opt, having_clause_opt, order_by_clause_opt, limit_clause_opt]

# INSERT Statement
insert_stmt:
  type: sequence
  elements: [INSERT, INTO, table_name, VALUES, LPAREN, value_list, RPAREN]

# UPDATE Statement
update_stmt:
  type: sequence
  elements: [UPDATE, table_name, SET, update_list, where_clause_opt]

# DELETE Statement
delete_stmt:
  type: sequence
  elements: [DELETE, FROM, table_name, where_clause_opt]

# CREATE TABLE Statement
create_table_stmt:
  type: sequence
  elements: [CREATE, TABLE, table_name, LPAREN, column_definition_list, RPAREN]

# DROP TABLE Statement
drop_table_stmt:
  type: sequence
  elements: [DROP, TABLE, table_name]

# Basic elements
select_list:
  type: choice
  options: [STAR, column_list]

STAR: "*"

column_list:
  type: sequence
  elements: [column_name, column_list_tail]

column_list_tail:
  type: optional
  element: column_list_continuation

column_list_continuation:
  type: sequence
  elements: [COMMA, column_name, column_list_tail]

table_reference:
  type: choice
  options: [table_name, table_alias]

table_alias:
  type: sequence
  elements: [table_name, AS, identifier]

where_clause_opt:
  type: optional
  element: where_clause

where_clause:
  type: sequence
  elements: [WHERE, boolean_expression]

boolean_expression:
  type: choice
  options: [comparison_predicate, boolean_expression_compound]

comparison_predicate:
  type: sequence
  elements: [expression, comparison_operator, expression]

comparison_operator:
  type: choice
  options: [EQ, NE, LT, LTE, GT, GTE]

EQ: "="
NE: "<>"
LT: "<"
LTE: "<="
GT: ">"
GTE: ">="

boolean_expression_compound:
  type: sequence
  elements: [boolean_expression, boolean_operator, boolean_expression]

boolean_operator:
  type: choice
  options: [AND, OR]

AND: "AND"
OR: "OR"

group_by_clause_opt:
  type: optional
  element: group_by_clause

group_by_clause:
  type: sequence
  elements: [GROUP, BY, column_list]

GROUP: "GROUP"
BY: "BY"

having_clause_opt:
  type: optional
  element: having_clause

having_clause:
  type: sequence
  elements: [HAVING, boolean_expression]

HAVING: "HAVING"

order_by_clause_opt:
  type: optional
  element: order_by_clause

order_by_clause:
  type: sequence
  elements: [ORDER, BY, order_by_list]

ORDER: "ORDER"

order_by_list:
  type: sequence
  elements: [order_by_item, order_by_list_tail]

order_by_item:
  type: sequence
  elements: [expression, sort_direction_opt]

sort_direction_opt:
  type: optional
  element: sort_direction

sort_direction:
  type: choice
  options: [ASC, DESC]

ASC: "ASC"
DESC: "DESC"

order_by_list_tail:
  type: optional
  element: order_by_list_continuation

order_by_list_continuation:
  type: sequence
  elements: [COMMA, order_by_item, order_by_list_tail]

limit_clause_opt:
  type: optional
  element: limit_clause

limit_clause:
  type: sequence
  elements: [LIMIT, integer_literal]

LIMIT: "LIMIT"

# Expressions
expression:
  type: choice
  options: [column_name, literal, function_call, LPAREN, expression, RPAREN]

function_call:
  type: sequence
  elements: [function_name, LPAREN, function_arguments_opt, RPAREN]

function_name:
  type: choice
  options: [COUNT, SUM, AVG, MIN, MAX, COALESCE, LENGTH]

COUNT: "COUNT"
SUM: "SUM"
AVG: "AVG"
MIN: "MIN"
MAX: "MAX"
COALESCE: "COALESCE"
LENGTH: "LENGTH"

function_arguments_opt:
  type: optional
  element: function_arguments

function_arguments:
  type: sequence
  elements: [expression, function_arguments_tail]

function_arguments_tail:
  type: optional
  element: function_arguments_continuation

function_arguments_continuation:
  type: sequence
  elements: [COMMA, expression, function_arguments_tail]

# Column and table references
column_name:
  type: choice
  options: [identifier, qualified_column_name]

qualified_column_name:
  type: sequence
  elements: [table_name, DOT, identifier]

DOT: "."

identifier:
  type: choice
  options: [ID, NAME, VALUE, DATA, COLUMN1, COLUMN2, COLUMN3]

table_name:
  type: choice
  options: [TABLE1, TABLE2, TABLE3, TEST_TABLE, USERS, ORDERS, PRODUCTS]

# Literals
literal:
  type: choice
  options: [string_literal, numeric_literal, boolean_literal, null_literal]

string_literal:
  type: choice
  options: [TEST_STRING, DATA_STRING, VALUE_STRING, SAMPLE_STRING, EXAMPLE_STRING]

numeric_literal:
  type: choice
  options: [integer_literal, decimal_literal]

integer_literal:
  type: choice
  options: [INT_1, INT_2, INT_3, INT_10, INT_100, INT_1000]

decimal_literal:
  type: choice
  options: [DEC_1_5, DEC_2_75, DEC_10_25, DEC_100_50]

boolean_literal:
  type: choice
  options: [TRUE_VAL, FALSE_VAL]

null_literal:
  type: choice
  options: [NULL_VAL]

# Basic elements for other statements
value_list:
  type: sequence
  elements: [literal, value_list_tail]

value_list_tail:
  type: optional
  element: value_list_continuation

value_list_continuation:
  type: sequence
  elements: [COMMA, literal, value_list_tail]

update_list:
  type: sequence
  elements: [column_name, EQ, literal, update_list_tail]

update_list_tail:
  type: optional
  element: update_list_continuation

update_list_continuation:
  type: sequence
  elements: [COMMA, column_name, EQ, literal, update_list_tail]

column_definition_list:
  type: sequence
  elements: [column_definition, column_definition_list_tail]

column_definition:
  type: sequence
  elements: [column_name, data_type, column_constraints_opt]

data_type:
  type: choice
  options: [INT, TEXT, VARCHAR, BOOLEAN, TIMESTAMP, NUMERIC]

INT: "INT"
TEXT: "TEXT"
VARCHAR: "VARCHAR"
BOOLEAN: "BOOLEAN"
TIMESTAMP: "TIMESTAMP"
NUMERIC: "NUMERIC"

column_constraints_opt:
  type: optional
  element: column_constraints

column_constraints:
  type: choice
  options: [PRIMARY_KEY, NOT_NULL, UNIQUE]

PRIMARY_KEY: "PRIMARY KEY"
NOT_NULL: "NOT NULL"
UNIQUE: "UNIQUE"

column_definition_list_tail:
  type: optional
  element: column_definition_list_continuation

column_definition_list_continuation:
  type: sequence
  elements: [COMMA, column_definition, column_definition_list_tail]

# SQL Keywords
INSERT: "INSERT"
INTO: "INTO"
UPDATE: "UPDATE"
DELETE: "DELETE"
CREATE: "CREATE"
DROP: "DROP"
TABLE: "TABLE"
VALUES: "VALUES"
SET: "SET"
WHERE: "WHERE"
FROM: "FROM"
SELECT: "SELECT"
LPAREN: "("
RPAREN: ")"
COMMA: ","

# Terminal identifiers
ID: "id"
NAME: "name"
VALUE: "value"
DATA: "data"
COLUMN1: "column1"
COLUMN2: "column2"
COLUMN3: "column3"

# Terminal table names
TABLE1: "table1"
TABLE2: "table2"
TABLE3: "table3"
TEST_TABLE: "test_table"
USERS: "users"
ORDERS: "orders"
PRODUCTS: "products"

# Terminal string literals
TEST_STRING: "'test'"
DATA_STRING: "'data'"
VALUE_STRING: "'value'"
SAMPLE_STRING: "'sample'"
EXAMPLE_STRING: "'example'"

# Terminal numeric literals
INT_1: "1"
INT_2: "2"
INT_3: "3"
INT_10: "10"
INT_100: "100"
INT_1000: "1000"
DEC_1_5: "1.5"
DEC_2_75: "2.75"
DEC_10_25: "10.25"
DEC_100_50: "100.50"

# Terminal boolean and null literals
TRUE_VAL: "true"
FALSE_VAL: "false"
NULL_VAL: "NULL" 