-- =================================================================
-- Comprehensive Seed Corpus for YBFuzz Mutational Engine
-- =================================================================
-- This file contains a diverse set of valid SQL queries. The mutational
-- engine will randomly select and intelligently modify these queries.
-- Use the '$$schema$$' placeholder for the schema name.

-- === Basic SELECT statements with various WHERE clauses ===
SELECT * FROM $$schema$$.products WHERE price > 150.0;
SELECT name, category FROM $$schema$$.products WHERE stock_count = 0;
SELECT id, name, price FROM $$schema$$.products WHERE category = 'Category-5' AND price < 100;
SELECT * FROM $$schema$$.products WHERE name LIKE 'Product-1%';
SELECT * FROM $$schema$$.products WHERE category <> 'Category-7';

-- === Queries with Aggregation and Grouping ===
SELECT category, COUNT(*) AS product_count FROM $$schema$$.products GROUP BY category;
SELECT category, AVG(price) AS avg_price FROM $$schema$$.products GROUP BY category;
SELECT category, SUM(stock_count) AS total_stock FROM $$schema$$.products GROUP BY category HAVING SUM(stock_count) > 500;
SELECT product_id, COUNT(*) FROM $$schema$$.orders GROUP BY product_id ORDER BY COUNT(*) DESC;

-- === Queries with Joins ===
SELECT p.name, p.price, o.quantity, o.order_date FROM $$schema$$.products p JOIN $$schema$$.orders o ON p.id = o.product_id;
SELECT p.category, SUM(o.quantity) FROM $$schema$$.products p INNER JOIN $$schema$$.orders o ON p.id = o.product_id GROUP BY p.category;
SELECT p.name, o.order_id FROM $$schema$$.products p LEFT JOIN $$schema$$.orders o ON p.id = o.product_id WHERE o.order_id IS NULL;

-- === Queries with Sorting and Limiting ===
SELECT * FROM $$schema$$.products ORDER BY price DESC LIMIT 10;
SELECT * FROM $$schema$$.orders ORDER BY order_date ASC, quantity DESC LIMIT 50 OFFSET 10;

-- === Queries with Subqueries and Common Table Expressions (CTEs) ===
SELECT name, price FROM $$schema$$.products WHERE price > (SELECT AVG(price) FROM $$schema$$.products);
SELECT * FROM $$schema$$.orders WHERE product_id IN (SELECT id FROM $$schema$$.products WHERE category = 'Category-3');
WITH CategoryAvg AS (SELECT category, AVG(price) as avg_cat_price FROM $$schema$$.products GROUP BY category) SELECT * FROM CategoryAvg WHERE avg_cat_price > 50;

-- === DML Statements (INSERT, UPDATE, DELETE) ===
-- Note: The mutator would need to be enhanced to handle DML mutations intelligently.
INSERT INTO $$schema$$.orders (order_id, product_id, quantity, order_date) VALUES (999, 10, 1, '2025-08-03');
UPDATE $$schema$$.products SET stock_count = stock_count + 10 WHERE id = 5;
DELETE FROM $$schema$$.orders WHERE order_id = 150;

-- === DDL Statements ===
-- The fuzzer should be careful when mutating DDL.
CREATE INDEX idx_product_category ON $$schema$$.products(category);
