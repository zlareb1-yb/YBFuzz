# This module is responsible for creating regression tests in the
# standard SQLLogicTest format, making bug reports immediately actionable.
# This definitive version supports both expected errors and expected results.

import logging
import re
import hashlib
from config import FuzzerConfig
from typing import Optional, List, Any

class SQLLogicTestFormatter:
    """
    Formats a failing query and its expected outcome into the SQLLogicTest format.
    """
    def __init__(self, config: FuzzerConfig):
        self.config = config
        self.logger = logging.getLogger(self.__class__.__name__)

    def format_error_test(self, sql_query: str, exception: Exception) -> str:
        """
        Creates a test case for a query that is expected to fail with a specific error.

        Args:
            sql_query: The (preferably minimized) SQL query that causes the error.
            exception: The exception thrown by the database.

        Returns:
            A string containing the complete SQLLogicTest case.
        """
        # --- Create a simplified, stable regex for the error message ---
        error_message = str(exception).splitlines()[0]
        # Escape regex special characters and replace volatile parts like numbers
        error_regex = re.escape(error_message)
        error_regex = re.sub(r'\\d+', r'\\d+', error_regex) # Match any number
        
        test_case = [
            "# Automatically generated by YBFuzz",
            f"# Seed: {self.config.get('random_seed')}",
            "",
            "statement error",
            f"regex {error_regex}",
            sql_query
        ]
        
        return "\n".join(test_case)

    def format_success_test(self, sql_query: str, expected_result: Optional[List[Any]]) -> str:
        """
        Creates a test case for a query that is expected to succeed and return
        a specific result set. This is used for logic bugs found by NoREC or
        Differential oracles.

        Args:
            sql_query: The (preferably minimized) SQL query.
            expected_result: The result set that the query should have returned.

        Returns:
            A string containing the complete SQLLogicTest case.
        """
        if expected_result is None:
            expected_result = []

        # Determine the number of columns from the first row
        num_columns = len(expected_result[0]) if expected_result else 0
        
        # Define the query type string (e.g., 'query II T' for 2 integer and 1 text column)
        # This is a simplified type mapping; a real implementation would be more robust.
        type_string = "T" * num_columns # Default to Text for simplicity
        
        test_case = [
            "# Automatically generated by YBFuzz",
            f"# Seed: {self.config.get('random_seed')}",
            "",
            f"query {type_string}",
            sql_query,
            "----"
        ]

        # Format the result set
        formatted_results = []
        for row in expected_result:
            # Convert each value in the row to a string, handling None as 'NULL'
            formatted_row = [str(val) if val is not None else "NULL" for val in row]
            formatted_results.append(" ".join(formatted_row))
        
        test_case.extend(formatted_results)

        return "\n".join(test_case)